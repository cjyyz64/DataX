!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
COMPRESSION_THRESHOLD	PluginKeys.java	/^    public final static String COMPRESSION_THRESHOLD = "compressionThreshold";$/;"	f	class:PluginKeys	access:public
CONFIG_ID	PluginKeys.java	/^    public final static String CONFIG_ID = "configId";$/;"	f	class:PluginKeys	access:public
DELETE	TairConfig.java	/^        DELETE,$/;"	e	enum:TairConfig.OperationType	file:	access:public
DELETE_EMPTY_RECORD	PluginKeys.java	/^    public final static String DELETE_EMPTY_RECORD = "deleteEmptyRecord";$/;"	f	class:PluginKeys	access:public
EXPIRE	PluginKeys.java	/^    public final static String EXPIRE = "expire";$/;"	f	class:PluginKeys	access:public
FIELD_DELIMITER	PluginKeys.java	/^    public final static String FIELD_DELIMITER = "fieldDelimiter";$/;"	f	class:PluginKeys	access:public
IS_DEBUG	TairWriterWorker.java	/^    private static final boolean IS_DEBUG = LOG.isDebugEnabled();$/;"	f	class:TairWriterWorker	file:	access:private
Job	TairWriter.java	/^    public static class Job extends Writer.Job {$/;"	c	class:TairWriter	inherits:Writer.Job	access:public
LANGUAGE	PluginKeys.java	/^    public final static String LANGUAGE = "language";$/;"	f	class:PluginKeys	access:public
LOG	TairClientManager.java	/^    private static final Logger LOG = LoggerFactory.getLogger(TairClientManager.class);$/;"	f	class:TairClientManager	file:	access:private
LOG	TairConfig.java	/^    private static final Logger LOG = LoggerFactory.getLogger(TairClientManager.class);$/;"	f	class:TairConfig	file:	access:private
LOG	TairWriter.java	/^        private static final Logger LOG = LoggerFactory$/;"	f	class:TairWriter.Job	file:	access:private
LOG	TairWriter.java	/^        private static final Logger LOG = LoggerFactory$/;"	f	class:TairWriter.Task	file:	access:private
LOG	TairWriterWorker.java	/^    private static final Logger LOG = LoggerFactory.getLogger(TairWriterWorker.class);$/;"	f	class:TairWriterWorker	file:	access:private
MAX_RETRY_TIMES	TairWriterWorker.java	/^    private static final int MAX_RETRY_TIMES = 5;$/;"	f	class:TairWriterWorker	file:	access:private
MC_TAIR_MANAGER	TairClientManager.java	/^    private static MultiClusterTairManager MC_TAIR_MANAGER;$/;"	f	class:TairClientManager	file:	access:private
NAMESPACE	PluginKeys.java	/^    public final static String NAMESPACE = "namespace";$/;"	f	class:PluginKeys	access:public
OperationType	TairConfig.java	/^    enum OperationType {\/\/TODO: delete??$/;"	g	class:TairConfig	access:default
PREFIXPUT	TairConfig.java	/^        PREFIXPUT,$/;"	e	enum:TairConfig.OperationType	file:	access:public
PREFIXSETCOUNTS	TairConfig.java	/^        PREFIXSETCOUNTS,$/;"	e	enum:TairConfig.OperationType	file:	access:public
PUT	TairConfig.java	/^        PUT,$/;"	e	enum:TairConfig.OperationType	file:	access:public
PluginKeys	PluginKeys.java	/^public class PluginKeys {$/;"	c
PluginKeys.COMPRESSION_THRESHOLD	PluginKeys.java	/^    public final static String COMPRESSION_THRESHOLD = "compressionThreshold";$/;"	f	class:PluginKeys	access:public
PluginKeys.CONFIG_ID	PluginKeys.java	/^    public final static String CONFIG_ID = "configId";$/;"	f	class:PluginKeys	access:public
PluginKeys.DELETE_EMPTY_RECORD	PluginKeys.java	/^    public final static String DELETE_EMPTY_RECORD = "deleteEmptyRecord";$/;"	f	class:PluginKeys	access:public
PluginKeys.EXPIRE	PluginKeys.java	/^    public final static String EXPIRE = "expire";$/;"	f	class:PluginKeys	access:public
PluginKeys.FIELD_DELIMITER	PluginKeys.java	/^    public final static String FIELD_DELIMITER = "fieldDelimiter";$/;"	f	class:PluginKeys	access:public
PluginKeys.LANGUAGE	PluginKeys.java	/^    public final static String LANGUAGE = "language";$/;"	f	class:PluginKeys	access:public
PluginKeys.NAMESPACE	PluginKeys.java	/^    public final static String NAMESPACE = "namespace";$/;"	f	class:PluginKeys	access:public
PluginKeys.SKEY_LIST	PluginKeys.java	/^    public final static String SKEY_LIST = "skeyList";$/;"	f	class:PluginKeys	access:public
PluginKeys.SPARSE_TABLE	PluginKeys.java	/^    public final static String SPARSE_TABLE = "sparseTable";$/;"	f	class:PluginKeys	access:public
PluginKeys.TIMEOUT	PluginKeys.java	/^    public final static String TIMEOUT = "timeout";$/;"	f	class:PluginKeys	access:public
PluginKeys.WRITER_TYPE	PluginKeys.java	/^    public final static String WRITER_TYPE = "writerType";$/;"	f	class:PluginKeys	access:public
SETCOUNT	TairConfig.java	/^        SETCOUNT,$/;"	e	enum:TairConfig.OperationType	file:	access:public
SKEY_LIST	PluginKeys.java	/^    public final static String SKEY_LIST = "skeyList";$/;"	f	class:PluginKeys	access:public
SPARSE_TABLE	PluginKeys.java	/^    public final static String SPARSE_TABLE = "sparseTable";$/;"	f	class:PluginKeys	access:public
TIMEOUT	PluginKeys.java	/^    public final static String TIMEOUT = "timeout";$/;"	f	class:PluginKeys	access:public
TairClientManager	TairClientManager.java	/^public final class TairClientManager {$/;"	c
TairClientManager.LOG	TairClientManager.java	/^    private static final Logger LOG = LoggerFactory.getLogger(TairClientManager.class);$/;"	f	class:TairClientManager	file:	access:private
TairClientManager.MC_TAIR_MANAGER	TairClientManager.java	/^    private static MultiClusterTairManager MC_TAIR_MANAGER;$/;"	f	class:TairClientManager	file:	access:private
TairClientManager.getInstance	TairClientManager.java	/^  public static synchronized MultiClusterTairManager getInstance(String configId,$/;"	m	class:TairClientManager	access:public	signature:(String configId, String lang, int compressionThreshold, int timeout)
TairClientManager.register	TairClientManager.java	/^    private static void register(String configId,$/;"	m	class:TairClientManager	file:	access:private	signature:(String configId, String lang, int compressionThreshold, int timeout)
TairConfig	TairConfig.java	/^    TairConfig(Configuration f) {$/;"	m	class:TairConfig	access:default	signature:(Configuration f)
TairConfig	TairConfig.java	/^public class TairConfig {$/;"	c
TairConfig.LOG	TairConfig.java	/^    private static final Logger LOG = LoggerFactory.getLogger(TairClientManager.class);$/;"	f	class:TairConfig	file:	access:private
TairConfig.OperationType	TairConfig.java	/^    enum OperationType {\/\/TODO: delete??$/;"	g	class:TairConfig	access:default
TairConfig.TairConfig	TairConfig.java	/^    TairConfig(Configuration f) {$/;"	m	class:TairConfig	access:default	signature:(Configuration f)
TairConfig.checkValid	TairConfig.java	/^    public boolean checkValid() {$/;"	m	class:TairConfig	access:public	signature:()
TairConfig.compression_threshold	TairConfig.java	/^    private int compression_threshold;$/;"	f	class:TairConfig	file:	access:private
TairConfig.conf	TairConfig.java	/^    private Configuration conf;$/;"	f	class:TairConfig	file:	access:private
TairConfig.configId	TairConfig.java	/^    private String configId;$/;"	f	class:TairConfig	file:	access:private
TairConfig.deleteEmptyRecord	TairConfig.java	/^    private boolean deleteEmptyRecord;$/;"	f	class:TairConfig	file:	access:private
TairConfig.error	TairConfig.java	/^    private String error = "success";$/;"	f	class:TairConfig	file:	access:private
TairConfig.expire	TairConfig.java	/^    private int expire;$/;"	f	class:TairConfig	file:	access:private
TairConfig.field_delimiter	TairConfig.java	/^    private char field_delimiter;$/;"	f	class:TairConfig	file:	access:private
TairConfig.language	TairConfig.java	/^    private String language;$/;"	f	class:TairConfig	file:	access:private
TairConfig.namespace	TairConfig.java	/^    private int namespace;$/;"	f	class:TairConfig	file:	access:private
TairConfig.skeyList	TairConfig.java	/^    private ArrayList<String> skeyList = null;\/\/ TODO: only skeyAsColumnName need$/;"	f	class:TairConfig	file:	access:private
TairConfig.timeout	TairConfig.java	/^    private int timeout;$/;"	f	class:TairConfig	file:	access:private
TairConfig.writerType	TairConfig.java	/^    private String writerType;\/\/put, prefixPut, multi_prefixPut \/counter, prefixCounter, multi_prefixCounter$/;"	f	class:TairConfig	file:	access:private
TairDataError	TairWriterErrorCode.java	/^    TairDataError("TairWriter-02", "TairWriter数据错误"),$/;"	e	enum:TairWriterErrorCode	file:	access:public
TairInitError	TairWriterErrorCode.java	/^    TairInitError("TairWriter-01", "TairWriter参数配置错误"),$/;"	e	enum:TairWriterErrorCode	file:	access:public
TairRuntimeError	TairWriterErrorCode.java	/^    TairRuntimeError("TairWriter-03", "TairWriter运行错误");$/;"	e	enum:TairWriterErrorCode	file:	access:public
TairWriter	TairWriter.java	/^public class TairWriter extends Writer {$/;"	c	inherits:Writer
TairWriter.Job	TairWriter.java	/^    public static class Job extends Writer.Job {$/;"	c	class:TairWriter	inherits:Writer.Job	access:public
TairWriter.Job.LOG	TairWriter.java	/^        private static final Logger LOG = LoggerFactory$/;"	f	class:TairWriter.Job	file:	access:private
TairWriter.Job.destroy	TairWriter.java	/^        public void destroy() {$/;"	m	class:TairWriter.Job	access:public	signature:()
TairWriter.Job.init	TairWriter.java	/^        public void init() {$/;"	m	class:TairWriter.Job	access:public	signature:()
TairWriter.Job.originalConfig	TairWriter.java	/^        private Configuration originalConfig;$/;"	f	class:TairWriter.Job	file:	access:private
TairWriter.Job.post	TairWriter.java	/^        public void post() {$/;"	m	class:TairWriter.Job	access:public	signature:()
TairWriter.Job.prepare	TairWriter.java	/^        public void prepare() {$/;"	m	class:TairWriter.Job	access:public	signature:()
TairWriter.Job.split	TairWriter.java	/^        public List<Configuration> split(int mandatoryNumber) {$/;"	m	class:TairWriter.Job	access:public	signature:(int mandatoryNumber)
TairWriter.Task	TairWriter.java	/^    public static class Task extends Writer.Task {$/;"	c	class:TairWriter	inherits:Writer.Task	access:public
TairWriter.Task.LOG	TairWriter.java	/^        private static final Logger LOG = LoggerFactory$/;"	f	class:TairWriter.Task	file:	access:private
TairWriter.Task.conf	TairWriter.java	/^        private TairConfig conf = null;$/;"	f	class:TairWriter.Task	file:	access:private
TairWriter.Task.destroy	TairWriter.java	/^        public void destroy() {$/;"	m	class:TairWriter.Task	access:public	signature:()
TairWriter.Task.init	TairWriter.java	/^        public void init() {$/;"	m	class:TairWriter.Task	access:public	signature:()
TairWriter.Task.post	TairWriter.java	/^        public void post() {$/;"	m	class:TairWriter.Task	access:public	signature:()
TairWriter.Task.prepare	TairWriter.java	/^        public void prepare() {$/;"	m	class:TairWriter.Task	access:public	signature:()
TairWriter.Task.startWrite	TairWriter.java	/^        public void startWrite(RecordReceiver recordReceiver) {$/;"	m	class:TairWriter.Task	access:public	signature:(RecordReceiver recordReceiver)
TairWriter.Task.tm	TairWriter.java	/^        private MultiClusterTairManager tm = null;$/;"	f	class:TairWriter.Task	file:	access:private
TairWriter.Task.worker	TairWriter.java	/^        private TairWriterWorker worker = null;$/;"	f	class:TairWriter.Task	file:	access:private
TairWriterErrorCode	TairWriterErrorCode.java	/^    private TairWriterErrorCode(String code, String description) {$/;"	m	class:TairWriterErrorCode	file:	access:private	signature:(String code, String description)
TairWriterErrorCode	TairWriterErrorCode.java	/^public enum TairWriterErrorCode implements ErrorCode {$/;"	g
TairWriterErrorCode.TairWriterErrorCode	TairWriterErrorCode.java	/^    private TairWriterErrorCode(String code, String description) {$/;"	m	class:TairWriterErrorCode	file:	access:private	signature:(String code, String description)
TairWriterErrorCode.code	TairWriterErrorCode.java	/^    private final String code;$/;"	f	class:TairWriterErrorCode	file:	access:private
TairWriterErrorCode.description	TairWriterErrorCode.java	/^    private final String description;$/;"	f	class:TairWriterErrorCode	file:	access:private
TairWriterErrorCode.getCode	TairWriterErrorCode.java	/^    public String getCode() {$/;"	m	class:TairWriterErrorCode	access:public	signature:()
TairWriterErrorCode.getDescription	TairWriterErrorCode.java	/^    public String getDescription() {$/;"	m	class:TairWriterErrorCode	access:public	signature:()
TairWriterErrorCode.toString	TairWriterErrorCode.java	/^    public String toString() {$/;"	m	class:TairWriterErrorCode	access:public	signature:()
TairWriterWorker	TairWriterWorker.java	/^    TairWriterWorker(TairManager tm,  TairConfig conf, TaskPluginCollector collector) {$/;"	m	class:TairWriterWorker	access:default	signature:(TairManager tm, TairConfig conf, TaskPluginCollector collector)
TairWriterWorker	TairWriterWorker.java	/^class TairWriterWorker {$/;"	c
TairWriterWorker.IS_DEBUG	TairWriterWorker.java	/^    private static final boolean IS_DEBUG = LOG.isDebugEnabled();$/;"	f	class:TairWriterWorker	file:	access:private
TairWriterWorker.LOG	TairWriterWorker.java	/^    private static final Logger LOG = LoggerFactory.getLogger(TairWriterWorker.class);$/;"	f	class:TairWriterWorker	file:	access:private
TairWriterWorker.MAX_RETRY_TIMES	TairWriterWorker.java	/^    private static final int MAX_RETRY_TIMES = 5;$/;"	f	class:TairWriterWorker	file:	access:private
TairWriterWorker.TairWriterWorker	TairWriterWorker.java	/^    TairWriterWorker(TairManager tm,  TairConfig conf, TaskPluginCollector collector) {$/;"	m	class:TairWriterWorker	access:default	signature:(TairManager tm, TairConfig conf, TaskPluginCollector collector)
TairWriterWorker.collector	TairWriterWorker.java	/^    private TaskPluginCollector collector = null;$/;"	f	class:TairWriterWorker	file:	access:private
TairWriterWorker.conf	TairWriterWorker.java	/^    private TairConfig conf = null;$/;"	f	class:TairWriterWorker	file:	access:private
TairWriterWorker.expire	TairWriterWorker.java	/^    private int expire;$/;"	f	class:TairWriterWorker	file:	access:private
TairWriterWorker.key	TairWriterWorker.java	/^    private Serializable key;$/;"	f	class:TairWriterWorker	file:	access:private
TairWriterWorker.keyCountPacks	TairWriterWorker.java	/^    private List<KeyCountPack> keyCountPacks = new ArrayList<KeyCountPack> ();$/;"	f	class:TairWriterWorker	file:	access:private
TairWriterWorker.keyValuePacks	TairWriterWorker.java	/^    private List<KeyValuePack> keyValuePacks = new ArrayList<KeyValuePack> ();$/;"	f	class:TairWriterWorker	file:	access:private
TairWriterWorker.tm	TairWriterWorker.java	/^    private TairManager tm = null;$/;"	f	class:TairWriterWorker	file:	access:private
TairWriterWorker.value	TairWriterWorker.java	/^    private StringBuilder value;$/;"	f	class:TairWriterWorker	file:	access:private
TairWriterWorker.write	TairWriterWorker.java	/^    int write(RecordReceiver recordReceiver) throws Exception {$/;"	m	class:TairWriterWorker	access:default	signature:(RecordReceiver recordReceiver)
Task	TairWriter.java	/^    public static class Task extends Writer.Task {$/;"	c	class:TairWriter	inherits:Writer.Task	access:public
WRITER_TYPE	PluginKeys.java	/^    public final static String WRITER_TYPE = "writerType";$/;"	f	class:PluginKeys	access:public
checkResultCode	TairWriterWorker.java	/^    private boolean checkResultCode(ResultCode rc, Record record) {$/;"	m	signature:(ResultCode rc, Record record)
checkValid	TairConfig.java	/^    public boolean checkValid() {$/;"	m	class:TairConfig	access:public	signature:()
code	TairWriterErrorCode.java	/^    private final String code;$/;"	f	class:TairWriterErrorCode	file:	access:private
collector	TairWriterWorker.java	/^    private TaskPluginCollector collector = null;$/;"	f	class:TairWriterWorker	file:	access:private
com.alibaba.datax.plugin.writer.tairwriter	PluginKeys.java	/^package com.alibaba.datax.plugin.writer.tairwriter;$/;"	p
com.alibaba.datax.plugin.writer.tairwriter	TairClientManager.java	/^package com.alibaba.datax.plugin.writer.tairwriter;$/;"	p
com.alibaba.datax.plugin.writer.tairwriter	TairConfig.java	/^package com.alibaba.datax.plugin.writer.tairwriter;$/;"	p
com.alibaba.datax.plugin.writer.tairwriter	TairWriter.java	/^package com.alibaba.datax.plugin.writer.tairwriter;$/;"	p
com.alibaba.datax.plugin.writer.tairwriter	TairWriterErrorCode.java	/^package com.alibaba.datax.plugin.writer.tairwriter;$/;"	p
com.alibaba.datax.plugin.writer.tairwriter	TairWriterWorker.java	/^package com.alibaba.datax.plugin.writer.tairwriter;$/;"	p
compression_threshold	TairConfig.java	/^    private int compression_threshold;$/;"	f	class:TairConfig	file:	access:private
conf	TairConfig.java	/^    private Configuration conf;$/;"	f	class:TairConfig	file:	access:private
conf	TairWriter.java	/^        private TairConfig conf = null;$/;"	f	class:TairWriter.Task	file:	access:private
conf	TairWriterWorker.java	/^    private TairConfig conf = null;$/;"	f	class:TairWriterWorker	file:	access:private
configId	TairConfig.java	/^    private String configId;$/;"	f	class:TairConfig	file:	access:private
deleteEmptyRecord	TairConfig.java	/^    private boolean deleteEmptyRecord;$/;"	f	class:TairConfig	file:	access:private
description	TairWriterErrorCode.java	/^    private final String description;$/;"	f	class:TairWriterErrorCode	file:	access:private
destroy	TairWriter.java	/^        public void destroy() {$/;"	m	class:TairWriter.Job	access:public	signature:()
destroy	TairWriter.java	/^        public void destroy() {$/;"	m	class:TairWriter.Task	access:public	signature:()
error	TairConfig.java	/^    private String error = "success";$/;"	f	class:TairConfig	file:	access:private
expire	TairConfig.java	/^    private int expire;$/;"	f	class:TairConfig	file:	access:private
expire	TairWriterWorker.java	/^    private int expire;$/;"	f	class:TairWriterWorker	file:	access:private
field_delimiter	TairConfig.java	/^    private char field_delimiter;$/;"	f	class:TairConfig	file:	access:private
getCode	TairWriterErrorCode.java	/^    public String getCode() {$/;"	m	class:TairWriterErrorCode	access:public	signature:()
getDescription	TairWriterErrorCode.java	/^    public String getDescription() {$/;"	m	class:TairWriterErrorCode	access:public	signature:()
getInstance	TairClientManager.java	/^  public static synchronized MultiClusterTairManager getInstance(String configId,$/;"	m	class:TairClientManager	access:public	signature:(String configId, String lang, int compressionThreshold, int timeout)
init	TairWriter.java	/^        public void init() {$/;"	m	class:TairWriter.Job	access:public	signature:()
init	TairWriter.java	/^        public void init() {$/;"	m	class:TairWriter.Task	access:public	signature:()
key	TairWriterWorker.java	/^    private Serializable key;$/;"	f	class:TairWriterWorker	file:	access:private
keyCountPacks	TairWriterWorker.java	/^    private List<KeyCountPack> keyCountPacks = new ArrayList<KeyCountPack> ();$/;"	f	class:TairWriterWorker	file:	access:private
keyValuePacks	TairWriterWorker.java	/^    private List<KeyValuePack> keyValuePacks = new ArrayList<KeyValuePack> ();$/;"	f	class:TairWriterWorker	file:	access:private
language	TairConfig.java	/^    private String language;$/;"	f	class:TairConfig	file:	access:private
multiPrefixPuts	TairWriterWorker.java	/^    private int multiPrefixPuts(Record record) throws Exception {$/;"	m	signature:(Record record)
multiPrefixSetCounts	TairWriterWorker.java	/^    private int multiPrefixSetCounts(Record record) throws Exception {$/;"	m	signature:(Record record)
namespace	TairConfig.java	/^    private int namespace;$/;"	f	class:TairConfig	file:	access:private
originalConfig	TairWriter.java	/^        private Configuration originalConfig;$/;"	f	class:TairWriter.Job	file:	access:private
post	TairWriter.java	/^        public void post() {$/;"	m	class:TairWriter.Job	access:public	signature:()
post	TairWriter.java	/^        public void post() {$/;"	m	class:TairWriter.Task	access:public	signature:()
prefixPut	TairWriterWorker.java	/^    private int prefixPut(Record record) throws Exception {$/;"	m	signature:(Record record)
prefixSetCount	TairWriterWorker.java	/^    private int prefixSetCount(Record record) throws Exception {$/;"	m	signature:(Record record)
prepare	TairWriter.java	/^        public void prepare() {$/;"	m	class:TairWriter.Job	access:public	signature:()
prepare	TairWriter.java	/^        public void prepare() {$/;"	m	class:TairWriter.Task	access:public	signature:()
put	TairWriterWorker.java	/^    private int put(Record record) throws Exception {$/;"	m	signature:(Record record)
register	TairClientManager.java	/^    private static void register(String configId,$/;"	m	class:TairClientManager	file:	access:private	signature:(String configId, String lang, int compressionThreshold, int timeout)
setCount	TairWriterWorker.java	/^    private int setCount(Record record) throws Exception {$/;"	m	signature:(Record record)
skeyList	TairConfig.java	/^    private ArrayList<String> skeyList = null;\/\/ TODO: only skeyAsColumnName need$/;"	f	class:TairConfig	file:	access:private
split	TairWriter.java	/^        public List<Configuration> split(int mandatoryNumber) {$/;"	m	class:TairWriter.Job	access:public	signature:(int mandatoryNumber)
startWrite	TairWriter.java	/^        public void startWrite(RecordReceiver recordReceiver) {$/;"	m	class:TairWriter.Task	access:public	signature:(RecordReceiver recordReceiver)
timeout	TairConfig.java	/^    private int timeout;$/;"	f	class:TairConfig	file:	access:private
tm	TairWriter.java	/^        private MultiClusterTairManager tm = null;$/;"	f	class:TairWriter.Task	file:	access:private
tm	TairWriterWorker.java	/^    private TairManager tm = null;$/;"	f	class:TairWriterWorker	file:	access:private
toString	TairWriterErrorCode.java	/^    public String toString() {$/;"	m	class:TairWriterErrorCode	access:public	signature:()
value	TairWriterWorker.java	/^    private StringBuilder value;$/;"	f	class:TairWriterWorker	file:	access:private
worker	TairWriter.java	/^        private TairWriterWorker worker = null;$/;"	f	class:TairWriter.Task	file:	access:private
write	TairWriterWorker.java	/^    int write(RecordReceiver recordReceiver) throws Exception {$/;"	m	class:TairWriterWorker	access:default	signature:(RecordReceiver recordReceiver)
writerType	TairConfig.java	/^    private String writerType;\/\/put, prefixPut, multi_prefixPut \/counter, prefixCounter, multi_prefixCounter$/;"	f	class:TairConfig	file:	access:private
